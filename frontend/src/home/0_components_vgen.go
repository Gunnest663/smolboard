package home

// DO NOT EDIT: This file was generated by vugu. Please regenerate instead of editing or add additional code in a separate file.

import "fmt"
import "reflect"
import "github.com/vugu/vjson"
import "github.com/vugu/vugu"
import js "github.com/vugu/vugu/js"

func (c *Home) Build(vgin *vugu.BuildIn) (vgout *vugu.BuildOut) {

	vgout = &vugu.BuildOut{}

	var vgiterkey interface{}
	_ = vgiterkey
	var vgn *vugu.VGNode
	vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "section", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "home"}}}
	vgout.Out = append(vgout.Out, vgn)	// root for output
	{
		vgparent := vgn
		_ = vgparent
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\t"}
		vgparent.AppendChild(vgn)
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "banner"}}}
		vgparent.AppendChild(vgn)
		vgn.SetInnerHTML(vugu.HTML("\n\t\t\x3Ch1\x3E\x3Ca href=\"/posts\"\x3Esmolboard\x3C/a\x3E\x3C/h1\x3E\n\t\t\x3Ca href=\"/posts\"\x3EPosts\x3C/a\x3E\n\t"))
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\t"}
		vgparent.AppendChild(vgn)
		{
			var vgcomp vugu.Builder = c.PostSearch
			if vgcomp != nil {
				vgin.BuildEnv.WireComponent(vgcomp)
				vgout.Components = append(vgout.Components, vgcomp)
				vgn = &vugu.VGNode{Component: vgcomp}
				vgparent.AppendChild(vgn)
			}
		}
	}
	vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "style", Attr: []vugu.VGAttribute(nil)}
	{
		vgn.AppendChild(&vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n\tsection.home {\n\t\tdisplay: flex;\n\n\t\tflex-direction:  column;\n\t\tjustify-content: center;\n\n\t\talign-items: flex-start;\n\t\talign-self:  center;\n\t}\n\n\tsection.home h1 {\n\t\tmargin: 0;\n\t}\n\n\tsection.home .banner {\n\t\tmargin-bottom: 16px;\n\t\tmargin-left:  1em;\n\t\tmargin-right: 1em;\n\t}\n", Attr: []vugu.VGAttribute(nil)})
	}
	vgout.AppendCSS(vgn)
	return vgout
}

// 'fix' unused imports
var _ fmt.Stringer
var _ reflect.Type
var _ vjson.RawMessage
var _ js.Value
